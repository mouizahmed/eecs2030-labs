package Lab8;
import java.util.List;
import java.util.ArrayList;
import java.util.Collection;

/**
 * This class contains a number of methods that 
 * works on a wide range of data types. 
 */

/* This is a parameterized class. You should decide 
* what the parameter should look like in order to 
* pass all the test cases. 
*/
public class Utility<T extends Comparable<T>>  {
	List<T> list;
	public Utility(List<T> myList) {
		// TODO Auto-generated constructor stub
		this.list = new ArrayList<>();
		this.list.addAll(myList);
	}
	
	
	public Utility() {
		// TODO Auto-generated constructor stub
		this.list = new ArrayList<>();
	}
	public int linearSearch(String string) {
		int position = -1;
		for (int i = 0; i <list.size(); i++) {
		if (string.compareTo((String) list.get(i)) == 0) {
		position = i;
		break;
		}
		}
		return position;
	}


	public int linearSearch(int element) {
		int position = -1;
		for (int i = 0; i <list.size(); i++) {
		if (element == list.get(i).hashCode()) {
		position = i;
		break;
		}
		}
		return position;
	}


	public int linearSearch(float element) {
		int position = -1;
		for (int i = 0; i <list.size(); i++) {
		if (Float.compare(element, (float) list.get(i)) == 0) {
		position = i;
		break;
		}
		}
		return position;
	}


	public int linearSearch(double element) {
		int position = -1;
		for (int i = 0; i <list.size(); i++) {
		if (Double.compare(element, (double) list.get(i)) == 0) {
		position = i;
		break;
		}
		}
		return position;
	}


	public int linearSearch(boolean element) {
		int position = -1;
		for (int i = 0; i <list.size(); i++) {
		if (Boolean.compare(element, (boolean) list.get(i)) == 0) {
		position = i;
		break;
		}
		}
		return position;
	}


	public int linearSearch(Point p3) {
		int position = -1;
		for (int i = 0; i <list.size(); i++) {
		if (p3.equals(list.get(i))) {
		position = i;
		break;
		}
		}
		return position;
	}




	public boolean containList(List<T> myList2) {
		if (this.list.containsAll(myList2)) {
			this.list = new ArrayList<T>();
			for (T obj: myList2)
			this.list.add(obj);
			return true;
			}
			else
			return false;
	}


	public void removeZero(List<NaturalNumber> myList) {
		for (int i = 0; i < myList.size(); i++) {
			if (MyInteger.isZero(myList.get(i))) {
			myList.remove(i);
			i--;
			}
			}

		
	}


	public void mergeList(List<T> list) {
        for (T obj : list) {
            list.add(obj);
        }
    }



	


	

	
	
	// Insert your code here
	
}


/**
 * This class implements a 2D points. 
 */
class Point implements Comparable<Point>{
	double x; 
	double y; 
	public Point(double x, double y) {
		this.x = x; 
		this.y = y;
	}
	@Override 
	public int compareTo(Point p) {
		if (this.x == p.x && this.y == p.y) return 0;
		else if (this.x == p.x) return 1;
		else return -1;	
	}
}

/**
 * This class represents an Integer number. 
 */
class MyInteger implements Comparable<MyInteger>{
	int x; 
	public MyInteger() {
		this.x = 0; 
	}
	public MyInteger(int x) {
		this.x = x; 
	}
	public static boolean isZero(MyInteger input) {
		return input.x == 0; 
	}
	@Override
	public int compareTo(MyInteger input) {
		if (this.x == input.x ) return 0;
		else if (this.x < input.x) return -1;
		else return 1;	
	}
}
/**
 * This class represents a subset of integer numbers that are natural numbers. 
 */
class NaturalNumber extends MyInteger{
	public NaturalNumber(int x) {
		super(x);
	}
}
/**
 * This class represents the odd natural numbers. 
 */

class OddNumber extends NaturalNumber{
	public OddNumber(int x) {
		super(x);
	}
	
}
/**
 * This class represents the even natural numbers. 
 */
class EvenNumber extends NaturalNumber{
	public EvenNumber(int x) {
		super(x);
	}
}